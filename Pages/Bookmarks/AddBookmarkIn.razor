@page "/folders/{folderID:int}/bookmarks/add"
@using System.ComponentModel.DataAnnotations
@using BookmarksFront.Classes
@inject IBookmarkService bookmark
@inject NavigationManager navmanager
@inject Auth Auth
@implements IRefreshable

<h3>Add Bookmark In Folder n°@folderID <span class="inline-block">(<a href="/folders/@(folderID)/content"><Feather icon="corner-up-left" width="32" height="32" /></a>)</span></h3>


<EditForm Model="@model" OnValidSubmit="@Submit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<CascadingValue Value="this">
		<ResponsiveTable>

			<ResponsiveTr>
				<ResponsiveTd>
					<label for="name">Name:</label>
				</ResponsiveTd>
				<ResponsiveTd>
					<InputText id="name" @bind-Value="@model.name" />
				</ResponsiveTd>
			</ResponsiveTr>

			<ResponsiveTr>
				<ResponsiveTd>
					<label for="url">URL:</label>
				</ResponsiveTd>
				<ResponsiveTd>
					<InputText id="url" @bind-Value="@model.Url" />
				</ResponsiveTd>
			</ResponsiveTr>

			<ResponsiveTr>
				<ResponsiveTd>
					<label for="comment">Comment:</label>
				</ResponsiveTd>
				<ResponsiveTd>
					<InputTextArea id="comment" @bind-Value="@model.Comment" class="fullwidth" />
				</ResponsiveTd>
			</ResponsiveTr>

			<ResponsiveTr>
				<ResponsiveTd>
					<label for="imgurl">Image Url:</label>
				</ResponsiveTd>
				<ResponsiveTd>
					<InputText id="imgurl" @bind-Value="@model.ImgUrl" />
				</ResponsiveTd>
			</ResponsiveTr>

			<ResponsiveTr>
				<ResponsiveTd colspan="2">
					<label for="tags">Tags (separated by ","):</label>
				</ResponsiveTd>
			</ResponsiveTr>

			<ResponsiveTr>
				<ResponsiveTd colspan="2">
					<InputTextArea id="tags" @bind-Value="@model.tags" class="fullwidth" />
				</ResponsiveTd>
			</ResponsiveTr>

			<ResponsiveTr>
				<ResponsiveTd colspan="2" classes="flex-end">
					<input type="submit" value="Create Bookmark" />
				</ResponsiveTd>
			</ResponsiveTr>

		</ResponsiveTable>
	</CascadingValue>
</EditForm>



<p>@message</p>

@code {
	[Parameter]
	public int folderID { get; set; }

	public bookmarkPostModel model { get; set; } = new();
	public string message { get; set; }

	public class bookmarkPostModel
	{
		[Required][StringLength(255)]
		public string? name{ get; set; }

		[StringLength(255)]
		public string? Comment { get; set; }

		[Required][StringLength(1023)][Url]
		public string? Url { get; set; }

		[StringLength(1023)][Url]
		public string? ImgUrl{ get; set; }

		public string? tags{ get; set; }
	}

	public async Task Submit(EditContext context)
	{
		var b = new Classes.Bookmark()
		{
			Name = model.name,
			Comment = string.IsNullOrWhiteSpace(model.Comment) ? null : model.Comment,
			URL = model.Url,
			ImgUrl = string.IsNullOrWhiteSpace(model.ImgUrl) ? null : model.ImgUrl,
			Folder = folderID

		};

		var result = await bookmark.PostBookmark(b);
		if (result.httpcode == 401)
		{
			await Auth.ResetConnection();
		}
		else if (result.isSuccess)
		{
			var tagsInText = model.tags?.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
			if(tagsInText!=null && tagsInText.Length>0){
				var putresponse = await bookmark.PutBookmarkTags(result.content.ID, tagsInText.ToList());
			}

			navmanager.NavigateTo($"/folders/{folderID}/content");
		}
		else
		{
			message = result.message;
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		if (await Auth.ConnectionRequired())
		{
			return;
		}
	}

	void IRefreshable.Refresh(){
		StateHasChanged();
	}
}

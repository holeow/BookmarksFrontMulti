@page "/folders/{folderID:int}/deleteconfirmation"
@inject CheckKey key
@inject IBookmarkService BookmarkService
@inject NavigationManager manager
@using BookmarksFront.Components
@using BookmarksFront.Classes

@if (response == null)
{
	<p>Loading, please wait ...</p>
}
else if (!response.isSuccess)
{
	@if (response.httpcode == 999)
	{
		<p>@response.message</p>
	}
	@if (response.errors != null)
	{
		@foreach (var item in response.errors)
		{
			<p>@item.type</p>
			<ul>
				@foreach (var par in item.data)
				{
					<li>@par.Key : @par.Value.ToString()</li>
				}
			</ul>
		}
	}

}
else
{
	@if (response.content.Container == null)
	{
		<h3>Impossible (<a href="/folders/@(response.content.ID)/content"><Feather icon="corner-up-left" stroke="blue" width="32" height="32" /></a>)</h3>
		<p style="color : red;">Impossible to delete root folder.</p>
	}
	else
	{
		<h3>Delete folder : @response.content.Name (<a href="/folders/@(response.content.Container)/content"><Feather icon="corner-up-left" stroke="blue" width="32" height="32" /></a>)</h3>
		<p>Are you sure of wanting to delete this folder?</p>
		<EditForm Model="@response" OnValidSubmit="@Confirm">
			<input type="submit" value="Confirm" style="background-color : red;">
		</EditForm>
	}

	
}

<p>@errormessage</p>


@code {
	[Parameter]
	public int folderID { get; set; }

	public string message { get; set; }
	public Response<Classes.Folder> response { get; set; }

	public string errormessage { get; set; }


	protected override async Task OnParametersSetAsync()
	{
		await key.Check();

		response = await BookmarkService.GetFolder(key.APIKey, folderID);

		if (response.httpcode == 401)
		{
			await key.ResetKeyAndRedirect();
		}
	}

	public async Task Confirm(EditContext context)
	{
		var responseToSend = await BookmarkService.DeleteFolder(key.APIKey, folderID);

		if (response.httpcode == 401)
		{
			await key.ResetKeyAndRedirect();
		}
		if (!response.isSuccess)
		{
			errormessage = response.message;
		}
		else
		{
			manager.NavigateTo($"/folders/{response.content.Container}/content");
		}
	}
}
@page "/folders/{folderID:int}/move"
@inject Auth Auth
@inject IBookmarkService BookmarkService
@inject NavigationManager manager
@using BookmarksFront.Components
@using BookmarksFront.Classes

@if (currentFolder == null)
{
	<p>Loading, please wait...</p>
}
else if (!currentFolder.isSuccess)
{
	<p>@currentFolder.message</p>
}
else
{
	@if (currentFolder.content.Container == null)
	{
		<h3>Impossible(<a href="/folders/@(currentFolder.content.ID)/content"><Feather icon="corner-up-left"  width="32" height="32"/></a>)</h3>
		<p style="color: red;">Impossible to move root folder.</p>
	}
	else
	{
		<h3>Move folder : @currentFolder.content.Name (<a href="/folders/@(currentFolder.content.Container)/content"><Feather icon="corner-up-left"  width="32" height="32" /></a>)</h3>
		@if (currentContainer == null)
		{
			<p>Loading, please wait...</p>
		}
		else
		{
			<div class="component-move">
			@if (currentContainer.content.current.Container == null)
			{
				<h3>
					<Feather icon="folder" classes="main-folder"  />
					@(currentContainer.content.current.Name) (<a @onclick="() => Place(currentContainer.content.current.ID)"><Feather icon="arrow-down-circle" classes="big-move-link" /></a>)
				</h3>
			}
			else
			{
				<h3>
					<Feather icon="folder" classes="main-folder" height="32" width="32" />
					@currentContainer.content.current.Name
					(
					<a @onclick="()=> Navigate(currentContainer.content.current.Container.Value)"><Feather icon="corner-up-left"   /></a>
					<a @onclick="()=> Place(currentContainer.content.current.ID)"><Feather icon="arrow-down-circle"  classes="big-move-link" /></a>
					)
				</h3>
			}

			@foreach (var item in currentContainer.content.children)
			{
				@if (item.ID == currentFolder.content.ID)
				{
					<div>
						<Feather icon="folder" classes="forbidden-folder" /><a>@item.Name</a>
						(<a><Feather icon="arrow-down-circle" classes="forbidden-move-link"/></a>)
					</div>
				}
				else
				{
					<div>
						<Feather icon="folder" classes="folder" /><a @onclick="()=> Navigate(item.ID)">@item.Name</a>
						(<a @onclick="() => Place(item.ID)"><Feather  icon="arrow-down-circle" classes="move-link" /></a>)
					</div>
				}

			}
			</div>
		}
	}

	

}

<p>@errormessage</p>
@code {
	[Parameter]
	public int folderID { get; set; }

	public Response<Classes.Folder> currentFolder { get; set; }
	public Response<FolderContent> currentContainer { get; set; }
	public string errormessage { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		if (await Auth.ConnectionRequired()) return;

		currentFolder = await BookmarkService.GetFolder( folderID);

		if (currentFolder.httpcode == 401)
		{
			await Auth.ResetConnection();
			return;
		}
		if (!currentFolder.isSuccess)
		{
			errormessage = currentFolder.message;
		}
		if (currentFolder.isSuccess)
		{
			if (currentFolder.content.Container == null) currentContainer = new();
			else currentContainer = await BookmarkService.GetFolderContent( currentFolder.content.Container.Value);
			if (currentContainer.httpcode == 401)
			{
				await Auth.ResetConnection();
				return;
			}

			if (!currentContainer.isSuccess)
			{
				errormessage = currentContainer.message;
			}
		}


	}

	public async Task Place(int id)
	{
		currentFolder.content.Container = id;
		var res = await BookmarkService.PutFolder( currentFolder.content);
		if (res.httpcode == 401)
		{
			await Auth.ResetConnection();
			return;
		}

		if (!res.isSuccess)
		{
			errormessage = res.message;
		}
		else
		{
			manager.NavigateTo($"/folders/{id}/content");
		}
	}

	public async Task Navigate(int id)
	{
		currentContainer = await BookmarkService.GetFolderContent( id);
		if (currentContainer.httpcode == 401)
		{
			await Auth.ResetConnection();
			return;
		}

		if (!currentContainer.isSuccess)
		{
			errormessage = currentContainer.message;
		}
	}

}

@page "/folders/{folderID:int}/content"
@using BookmarksFront.Classes
@inject IBookmarkService BookmarkService
@inject Auth Auth


@if (response == null)
{
<p>loading please wait...</p>
}
else if (response.isSuccess)
{

	<h3><Feather icon="folder" classes="main-icon" />
		@if (current.Container == null)
		{
			@current.Name
		}
		else
		{
			@current.Name <span class="inline-block">(<a href="/folders/@(current.Container)/content"><Feather icon="corner-up-left"/></a> <A href="@($"/folders/{current.ID}/edit")" return="@($"/folders/{current.ID}/content")" folderdata=@current><Feather icon="edit" /></A>)</span>
		}
	</h3>
	<hr/>
	<h3><Feather icon="folder" /> Folders (<a href="/folders/@(current.ID)/folders/add"><Feather icon="folder-plus"/></a>)</h3>
	@foreach (Classes.Folder f in response.content.children)
	{
		<Folder  folder="f"/>
	}
	<hr/>
	<h3><Feather icon="bookmark" />Bookmarks (<a href="/folders/@(current.ID)/bookmarks/add"><Feather icon="plus-square"/></a>)</h3>
	@foreach (Classes.Bookmark b in response.content.bookmarks)
	{
		<Bookmark  bookmark="b"/>
	}
	<hr/>
	<h3><Feather icon="tag" />Tags</h3>

	@if (tagsresponse != null && tagsresponse.isSuccess)
	{
		@foreach (var tag in tagsresponse.content)
		{
			<span class="tag"><Feather icon="tag" />[&ensp;@tag&ensp;]</span>
		}
	}
}
else
{
	<p>Error : @response.httpcode</p>
	@if (response.httpcode == 999)
	{
		<p>@response.message</p>
	}
	@if (response.errors != null)
	{
		@foreach (var item in response.errors)
		{
			<p>@item.type</p>
			<ul>
				@foreach (var par in item.data)
				{
					<li>@par.Key : @par.Value.ToString()</li>
				}
			</ul>
		}
	}
	
}

@code {
	[Parameter]
	public int folderID { get; set; }

	Response<FolderContent> response;
	Classes.Folder current => response.content.current;
	Response<List<string>> tagsresponse;

	//protected override async Task OnInitializedAsync()
	//{
	//	await key.Check();

	//	var apikey = key.APIKey;


	//	response = await BookmarkService.GetFolderContent(apikey, folderID);

	//	if (response.httpcode == 401)
	//	{
	//		await key.ResetKeyAndRedirect();
	//	}

	//}

	protected override async Task OnParametersSetAsync()
	{
		if (await Auth.ConnectionRequired()) return;

		
		response = await BookmarkService.GetFolderContent( folderID);
		if (response.httpcode == 401)
		{
			await Auth.ResetConnection();
			return;
		}

		tagsresponse = await BookmarkService.GetTagsOfFolder(folderID);

	}
}

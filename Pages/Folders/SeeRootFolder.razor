@page "/user/root/content"
@using BookmarksFront.Classes

@inject CheckKey key
@inject IBookmarkService bookmarks
@inject UserAgent UA
@inject Auth Auth



	@if (response == null)
	{
		<p>loading please wait...</p>
	}
	else if (response.isSuccess)
	{
		
		<h3>
			<Feather icon="folder" classes="main-icon"/>
			@if (current.Container == null)
			{
				@current.Name
			}
			else
			{
			@current.Name <span class="inline-block">(<a href="/folders/@(current.Container)/content"><Feather icon="corner-up-left" /></a>)</span>
			}
		</h3>
		<hr />
		<h3><Feather icon="folder" /> Folders (<a href="/folders/@(current.ID)/folders/add"><Feather icon="folder-plus"/></a>)</h3>
		@foreach (Classes.Folder f in response.content.children)
		{
			<Folder fillColor="yellow" folder="f" />
		}
		<hr />
		<h3><Feather icon="bookmark"/>Bookmarks (<a href="/folders/@(current.ID)/bookmarks/add"><Feather icon="plus-square" /></a>)</h3>
		@foreach (Classes.Bookmark b in response.content.bookmarks)
		{
			<Bookmark fillColor="green" bookmark="b" />
		}
	}
	else
	{
		<p>Error : @response.httpcode</p>
		@if (response.httpcode == 999)
		{
			<p>@response.message</p>
		}
		@if (response.errors != null)
		{
			@foreach (var item in response.errors)
			{
				<p>@item.type</p>
				<ul>
					@foreach (var par in item.data)
					{
						<li>@par.Key : @par.Value.ToString()</li>
					}
				</ul>
			}
		}

	}





@code {


	Response<FolderContent> response;
	Classes.Folder current => response.content.current;

	protected override async Task OnInitializedAsync()
	{
		if (await Auth.ConnectionRequired()) return;
		


		response = await bookmarks.GetRootFolderContent();
		if (response.httpcode == 401)
		{
			await Auth.ResetConnection();
		}

		
	}
}
